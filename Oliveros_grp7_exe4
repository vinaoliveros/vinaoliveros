# Define a variable x with a value of 5
x = 5

# Define a condition to check if x is greater than 10
if x > 10:
    print("The condition is True")
else:
    print("The condition is False")

# Create a list with string, int, and boolean data types
my_list = ["apple", 1, True]

# Access elements of the list
print(my_list[0])  # Output: apple
print(my_list[1])  # Output: 1
print(my_list[2])  # Output: True

# Modify an element of the list
my_list[0] = "banana"
print(my_list)  # Output: ["banana", 1, True]

# Add an element to the list
my_list.append("orange")
print(my_list)  # Output: ["banana", 1, True, "orange"]


Sets
# Create a set with string, int, and boolean data types
my_set = {"apple", 1, True}

# Access elements of the set (note: sets are unordered)
print(my_set)  # Output: {1, 'apple', True}

# Add an element to the set
my_set.add("orange")
print(my_set)  # Output: {1, 'apple', True, 'orange'}

# Remove an element from the set
my_set.remove("apple")
print(my_set)  # Output: {1, True, 'orange'}


Tuples
# Create a tuple with string, int, and boolean data types
my_tuple = ("apple", 1, True)

# Access elements of the tuple
print(my_tuple[0])  # Output: apple
print(my_tuple[1])  # Output: 1
print(my_tuple[2])  # Output: True

# Note: Tuples are immutable, so we can't modify an element of the tuple
# my_tuple[0] = "banana"  # This would raise a TypeError


Dictionaries 
# Create a dictionary with string, int, and boolean data types
my_dict = {"name": "Vivina", "age": 22, "is_admin": True}

# Access elements of the dictionary
print(my_dict["name"])  # Output: Mico
print(my_dict["age"])  # Output: 21
print(my_dict["is_admin"])  # Output: True

# Modify an element of the dictionary
my_dict["name"] = "Vivina"
print(my_dict)  # Output: {"name": "Vivina", "age": 22, "is_admin": True}

# Add an element to the dictionary
my_dict["country"] = "PHILIPPINES"
print(my_dict)  # Output: {"name": "Vivina", "age": 22, "is_admin": True, "country": "PHILIPPINES"}
